; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\obj\slre.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\slre.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I"..\CAN TEST" -I.\RTE -I.\RTE\Device -I.\RTE\Device\MDR1986BE92 -I.\rtos -I.\rtos\include -I.\RTE\Device\MDR1986BE92 -I.\RTE\_Target_1 -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Config -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\CoreSupport -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 --omf_browse=.\obj\slre.crf slre.c]
                          THUMB

                          AREA ||i.bar||, CODE, READONLY, ALIGN=1

                  bar PROC
;;;182    
;;;183    static int bar(const char *re, int re_len, const char *s, int s_len,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;184                   struct regex_info *info, int bi) {
000004  b089              SUB      sp,sp,#0x24
000006  4606              MOV      r6,r0
000008  4688              MOV      r8,r1
00000a  4693              MOV      r11,r2
00000c  4699              MOV      r9,r3
00000e  f8dda048          LDR      r10,[sp,#0x48]
;;;185      /* i is offset in re, j is offset in s, bi is brackets index */
;;;186      int i, j, n, step;
;;;187    
;;;188      for (i = j = 0; i < re_len && j <= s_len; i += step) {
000012  2000              MOVS     r0,#0
000014  4604              MOV      r4,r0
000016  4605              MOV      r5,r0
000018  e18c              B        |L1.820|
                  |L1.26|
;;;189    
;;;190        /* Handle quantifiers. Get the length of the chunk. */
;;;191        step = re[i] == '(' ? info->brackets[bi + 1].len + 2 :
00001a  5d70              LDRB     r0,[r6,r5]
00001c  2828              CMP      r0,#0x28
00001e  d106              BNE      |L1.46|
000020  9813              LDR      r0,[sp,#0x4c]
000022  1c40              ADDS     r0,r0,#1
000024  eb0a1000          ADD      r0,r10,r0,LSL #4
000028  6840              LDR      r0,[r0,#4]
00002a  1c80              ADDS     r0,r0,#2
00002c  e004              B        |L1.56|
                  |L1.46|
;;;192          get_op_len(re + i, re_len - i);
00002e  eba80105          SUB      r1,r8,r5
000032  1970              ADDS     r0,r6,r5
000034  f7fffffe          BL       get_op_len
                  |L1.56|
000038  4607              MOV      r7,r0
;;;193    
;;;194        DBG(("%s [%.*s] [%.*s] re_len=%d step=%d i=%d j=%d\n", __func__,
;;;195             re_len - i, re + i, s_len - j, s + j, re_len, step, i, j));
;;;196    
;;;197        FAIL_IF(is_quantifier(&re[i]), SLRE_UNEXPECTED_QUANTIFIER);
00003a  1970              ADDS     r0,r6,r5
00003c  f7fffffe          BL       is_quantifier
000040  b120              CBZ      r0,|L1.76|
000042  f06f0001          MVN      r0,#1
                  |L1.70|
;;;198        FAIL_IF(step <= 0, SLRE_INVALID_CHARACTER_SET);
;;;199    
;;;200        if (i + step < re_len && is_quantifier(re + i + step)) {
;;;201          DBG(("QUANTIFIER: [%.*s]%c [%.*s]\n", step, re + i,
;;;202               re[i + step], s_len - j, s + j));
;;;203          if (re[i + step] == '?') {
;;;204            int result = bar(re + i, step, s + j, s_len - j, info, bi);
;;;205            j += result > 0 ? result : 0;
;;;206            i++;
;;;207          } else if (re[i + step] == '+' || re[i + step] == '*') {
;;;208            int j2 = j, nj = j, n1, n2 = -1, ni, non_greedy = 0;
;;;209    
;;;210            /* Points to the regexp code after the quantifier */
;;;211            ni = i + step + 1;
;;;212            if (ni < re_len && re[ni] == '?') {
;;;213              non_greedy = 1;
;;;214              ni++;
;;;215            }
;;;216    
;;;217            do {
;;;218              if ((n1 = bar(re + i, step, s + j2, s_len - j2, info, bi)) > 0) {
;;;219                j2 += n1;
;;;220              }
;;;221              if (re[i + step] == '+' && n1 < 0) break;
;;;222    
;;;223              if (ni >= re_len) {
;;;224                /* After quantifier, there is nothing */
;;;225                nj = j2;
;;;226              } else if ((n2 = bar(re + ni, re_len - ni, s + j2,
;;;227                                   s_len - j2, info, bi)) >= 0) {
;;;228                /* Regex after quantifier matched */
;;;229                nj = j2 + n2;
;;;230              }
;;;231              if (nj > j && non_greedy) break;
;;;232            } while (n1 > 0);
;;;233    
;;;234            /*
;;;235             * Even if we found one or more pattern, this branch will be executed,
;;;236             * changing the next captures.
;;;237             */
;;;238            if (n1 < 0 && n2 < 0 && re[i + step] == '*' &&
;;;239                (n2 = bar(re + ni, re_len - ni, s + j, s_len - j, info, bi)) > 0) {
;;;240              nj = j + n2;
;;;241            }
;;;242    
;;;243            DBG(("STAR/PLUS END: %d %d %d %d %d\n", j, nj, re_len - ni, n1, n2));
;;;244            FAIL_IF(re[i + step] == '+' && nj == j, SLRE_NO_MATCH);
;;;245    
;;;246            /* If while loop body above was not executed for the * quantifier,  */
;;;247            /* make sure the rest of the regex matches                          */
;;;248            FAIL_IF(nj == j && ni < re_len && n2 < 0, SLRE_NO_MATCH);
;;;249    
;;;250            /* Returning here cause we've matched the rest of RE already */
;;;251            return nj;
;;;252          }
;;;253          continue;
;;;254        }
;;;255    
;;;256        if (re[i] == '[') {
;;;257          n = match_set(re + i + 1, re_len - (i + 2), s + j, info);
;;;258          DBG(("SET %.*s [%.*s] -> %d\n", step, re + i, s_len - j, s + j, n));
;;;259          FAIL_IF(n <= 0, SLRE_NO_MATCH);
;;;260          j += n;
;;;261        } else if (re[i] == '(') {
;;;262          n = SLRE_NO_MATCH;
;;;263          bi++;
;;;264          FAIL_IF(bi >= info->num_brackets, SLRE_INTERNAL_ERROR);
;;;265          DBG(("CAPTURING [%.*s] [%.*s] [%s]\n",
;;;266               step, re + i, s_len - j, s + j, re + i + step));
;;;267    
;;;268          if (re_len - (i + step) <= 0) {
;;;269            /* Nothing follows brackets */
;;;270            n = doh(s + j, s_len - j, info, bi);
;;;271          } else {
;;;272            int j2;
;;;273            for (j2 = 0; j2 <= s_len - j; j2++) {
;;;274              if ((n = doh(s + j, s_len - (j + j2), info, bi)) >= 0 &&
;;;275                  bar(re + i + step, re_len - (i + step),
;;;276                      s + j + n, s_len - (j + n), info, bi) >= 0) break;
;;;277            }
;;;278          }
;;;279    
;;;280          DBG(("CAPTURED [%.*s] [%.*s]:%d\n", step, re + i, s_len - j, s + j, n));
;;;281          FAIL_IF(n < 0, n);
;;;282          if (info->caps != NULL && n > 0) {
;;;283            info->caps[bi - 1].ptr = s + j;
;;;284            info->caps[bi - 1].len = n;
;;;285          }
;;;286          j += n;
;;;287        } else if (re[i] == '^') {
;;;288          FAIL_IF(j != 0, SLRE_NO_MATCH);
;;;289        } else if (re[i] == '$') {
;;;290          FAIL_IF(j != s_len, SLRE_NO_MATCH);
;;;291        } else {
;;;292          FAIL_IF(j >= s_len, SLRE_NO_MATCH);
;;;293          n = match_op((const unsigned char *) (re + i), (const unsigned char *) (s + j), info);
;;;294          FAIL_IF(n <= 0, n);
;;;295          j += n;
;;;296        }
;;;297      }
;;;298    
;;;299      return j;
;;;300    }
000046  b009              ADD      sp,sp,#0x24
000048  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.76|
00004c  2f00              CMP      r7,#0                 ;198
00004e  dc02              BGT      |L1.86|
000050  f06f0004          MVN      r0,#4                 ;198
000054  e7f7              B        |L1.70|
                  |L1.86|
000056  19e8              ADDS     r0,r5,r7              ;200
000058  4540              CMP      r0,r8                 ;200
00005a  da7c              BGE      |L1.342|
00005c  1971              ADDS     r1,r6,r5              ;200
00005e  19c8              ADDS     r0,r1,r7              ;200
000060  f7fffffe          BL       is_quantifier
000064  2800              CMP      r0,#0                 ;200
000066  d076              BEQ      |L1.342|
000068  19e8              ADDS     r0,r5,r7              ;203
00006a  5c30              LDRB     r0,[r6,r0]            ;203
00006c  283f              CMP      r0,#0x3f              ;203
00006e  d114              BNE      |L1.154|
000070  9813              LDR      r0,[sp,#0x4c]         ;204
000072  eba90304          SUB      r3,r9,r4              ;204
000076  eb0b0204          ADD      r2,r11,r4             ;204
00007a  e9cda000          STRD     r10,r0,[sp,#0]        ;204
00007e  1970              ADDS     r0,r6,r5              ;204
000080  4639              MOV      r1,r7                 ;204
000082  f7fffffe          BL       bar
000086  9007              STR      r0,[sp,#0x1c]         ;204
000088  9807              LDR      r0,[sp,#0x1c]         ;205
00008a  2800              CMP      r0,#0                 ;205
00008c  dd01              BLE      |L1.146|
00008e  9807              LDR      r0,[sp,#0x1c]         ;205
000090  e000              B        |L1.148|
                  |L1.146|
000092  2000              MOVS     r0,#0                 ;205
                  |L1.148|
000094  4404              ADD      r4,r4,r0              ;205
000096  1c6d              ADDS     r5,r5,#1              ;206
000098  e09c              B        |L1.468|
                  |L1.154|
00009a  19e8              ADDS     r0,r5,r7              ;207
00009c  5c30              LDRB     r0,[r6,r0]            ;207
00009e  282b              CMP      r0,#0x2b              ;207
0000a0  d003              BEQ      |L1.170|
0000a2  19e8              ADDS     r0,r5,r7              ;207
0000a4  5c30              LDRB     r0,[r6,r0]            ;207
0000a6  282a              CMP      r0,#0x2a              ;207
0000a8  d17e              BNE      |L1.424|
                  |L1.170|
0000aa  9407              STR      r4,[sp,#0x1c]         ;208
0000ac  9406              STR      r4,[sp,#0x18]         ;208
0000ae  f04f30ff          MOV      r0,#0xffffffff        ;208
0000b2  9004              STR      r0,[sp,#0x10]         ;208
0000b4  2000              MOVS     r0,#0                 ;208
0000b6  9002              STR      r0,[sp,#8]            ;208
0000b8  19e8              ADDS     r0,r5,r7              ;211
0000ba  1c40              ADDS     r0,r0,#1              ;211
0000bc  9003              STR      r0,[sp,#0xc]          ;211
0000be  9803              LDR      r0,[sp,#0xc]          ;212
0000c0  4540              CMP      r0,r8                 ;212
0000c2  da08              BGE      |L1.214|
0000c4  9803              LDR      r0,[sp,#0xc]          ;212
0000c6  5c30              LDRB     r0,[r6,r0]            ;212
0000c8  283f              CMP      r0,#0x3f              ;212
0000ca  d104              BNE      |L1.214|
0000cc  2001              MOVS     r0,#1                 ;213
0000ce  9002              STR      r0,[sp,#8]            ;213
0000d0  9803              LDR      r0,[sp,#0xc]          ;214
0000d2  1c40              ADDS     r0,r0,#1              ;214
0000d4  9003              STR      r0,[sp,#0xc]          ;214
                  |L1.214|
0000d6  bf00              NOP                            ;217
                  |L1.216|
0000d8  9813              LDR      r0,[sp,#0x4c]         ;218
0000da  e9cda000          STRD     r10,r0,[sp,#0]        ;218
0000de  9907              LDR      r1,[sp,#0x1c]         ;218
0000e0  eba90301          SUB      r3,r9,r1              ;218
0000e4  eb0b0201          ADD      r2,r11,r1             ;218
0000e8  1970              ADDS     r0,r6,r5              ;218
0000ea  4639              MOV      r1,r7                 ;218
0000ec  f7fffffe          BL       bar
0000f0  9005              STR      r0,[sp,#0x14]         ;218
0000f2  2800              CMP      r0,#0                 ;218
0000f4  dd03              BLE      |L1.254|
0000f6  9905              LDR      r1,[sp,#0x14]         ;219
0000f8  9807              LDR      r0,[sp,#0x1c]         ;219
0000fa  4408              ADD      r0,r0,r1              ;219
0000fc  9007              STR      r0,[sp,#0x1c]         ;219
                  |L1.254|
0000fe  19e8              ADDS     r0,r5,r7              ;221
000100  5c30              LDRB     r0,[r6,r0]            ;221
000102  282b              CMP      r0,#0x2b              ;221
000104  d103              BNE      |L1.270|
000106  9805              LDR      r0,[sp,#0x14]         ;221
000108  2800              CMP      r0,#0                 ;221
00010a  da00              BGE      |L1.270|
00010c  e027              B        |L1.350|
                  |L1.270|
00010e  9803              LDR      r0,[sp,#0xc]          ;223
000110  4540              CMP      r0,r8                 ;223
000112  db02              BLT      |L1.282|
000114  9807              LDR      r0,[sp,#0x1c]         ;225
000116  9006              STR      r0,[sp,#0x18]         ;225
000118  e017              B        |L1.330|
                  |L1.282|
00011a  9813              LDR      r0,[sp,#0x4c]         ;226
00011c  e9cda000          STRD     r10,r0,[sp,#0]        ;226
000120  f8ddc01c          LDR      r12,[sp,#0x1c]        ;226
000124  eba9030c          SUB      r3,r9,r12             ;226
000128  eb0b020c          ADD      r2,r11,r12            ;226
00012c  f8ddc00c          LDR      r12,[sp,#0xc]         ;226
000130  eba8010c          SUB      r1,r8,r12             ;226
000134  eb06000c          ADD      r0,r6,r12             ;226
000138  f7fffffe          BL       bar
00013c  9004              STR      r0,[sp,#0x10]         ;226
00013e  2800              CMP      r0,#0                 ;226
000140  db03              BLT      |L1.330|
000142  9904              LDR      r1,[sp,#0x10]         ;229
000144  9807              LDR      r0,[sp,#0x1c]         ;229
000146  4408              ADD      r0,r0,r1              ;229
000148  9006              STR      r0,[sp,#0x18]         ;229
                  |L1.330|
00014a  9806              LDR      r0,[sp,#0x18]         ;231
00014c  42a0              CMP      r0,r4                 ;231
00014e  dd03              BLE      |L1.344|
000150  9802              LDR      r0,[sp,#8]            ;231
000152  b108              CBZ      r0,|L1.344|
000154  e003              B        |L1.350|
                  |L1.342|
000156  e03e              B        |L1.470|
                  |L1.344|
000158  9805              LDR      r0,[sp,#0x14]         ;232
00015a  2800              CMP      r0,#0                 ;232
00015c  dcbc              BGT      |L1.216|
                  |L1.350|
00015e  bf00              NOP                            ;221
000160  9805              LDR      r0,[sp,#0x14]         ;238
000162  2800              CMP      r0,#0                 ;238
000164  da1b              BGE      |L1.414|
000166  9804              LDR      r0,[sp,#0x10]         ;238
000168  2800              CMP      r0,#0                 ;238
00016a  da18              BGE      |L1.414|
00016c  19e8              ADDS     r0,r5,r7              ;238
00016e  5c30              LDRB     r0,[r6,r0]            ;238
000170  282a              CMP      r0,#0x2a              ;238
000172  d114              BNE      |L1.414|
000174  9813              LDR      r0,[sp,#0x4c]         ;239
000176  eba90304          SUB      r3,r9,r4              ;239
00017a  eb0b0204          ADD      r2,r11,r4             ;239
00017e  e9cda000          STRD     r10,r0,[sp,#0]        ;239
000182  f8ddc00c          LDR      r12,[sp,#0xc]         ;239
000186  eba8010c          SUB      r1,r8,r12             ;239
00018a  eb06000c          ADD      r0,r6,r12             ;239
00018e  f7fffffe          BL       bar
000192  9004              STR      r0,[sp,#0x10]         ;239
000194  2800              CMP      r0,#0                 ;239
000196  dd02              BLE      |L1.414|
000198  9804              LDR      r0,[sp,#0x10]         ;240
00019a  4420              ADD      r0,r0,r4              ;240
00019c  9006              STR      r0,[sp,#0x18]         ;240
                  |L1.414|
00019e  19e8              ADDS     r0,r5,r7              ;244
0001a0  5c30              LDRB     r0,[r6,r0]            ;244
0001a2  282b              CMP      r0,#0x2b              ;244
0001a4  d107              BNE      |L1.438|
0001a6  e000              B        |L1.426|
                  |L1.424|
0001a8  e013              B        |L1.466|
                  |L1.426|
0001aa  9806              LDR      r0,[sp,#0x18]         ;244
0001ac  42a0              CMP      r0,r4                 ;244
0001ae  d102              BNE      |L1.438|
0001b0  f04f30ff          MOV      r0,#0xffffffff        ;244
0001b4  e747              B        |L1.70|
                  |L1.438|
0001b6  9806              LDR      r0,[sp,#0x18]         ;248
0001b8  42a0              CMP      r0,r4                 ;248
0001ba  d108              BNE      |L1.462|
0001bc  9803              LDR      r0,[sp,#0xc]          ;248
0001be  4540              CMP      r0,r8                 ;248
0001c0  da05              BGE      |L1.462|
0001c2  9804              LDR      r0,[sp,#0x10]         ;248
0001c4  2800              CMP      r0,#0                 ;248
0001c6  da02              BGE      |L1.462|
0001c8  f04f30ff          MOV      r0,#0xffffffff        ;248
0001cc  e73b              B        |L1.70|
                  |L1.462|
0001ce  9806              LDR      r0,[sp,#0x18]         ;251
0001d0  e739              B        |L1.70|
                  |L1.466|
0001d2  bf00              NOP                            ;252
                  |L1.468|
0001d4  e0ad              B        |L1.818|
                  |L1.470|
0001d6  5d70              LDRB     r0,[r6,r5]            ;256
0001d8  285b              CMP      r0,#0x5b              ;256
0001da  d113              BNE      |L1.516|
0001dc  eb0b0204          ADD      r2,r11,r4             ;257
0001e0  1cab              ADDS     r3,r5,#2              ;257
0001e2  eba80103          SUB      r1,r8,r3              ;257
0001e6  1973              ADDS     r3,r6,r5              ;257
0001e8  1c58              ADDS     r0,r3,#1              ;257
0001ea  4653              MOV      r3,r10                ;257
0001ec  f7fffffe          BL       match_set
0001f0  9008              STR      r0,[sp,#0x20]         ;257
0001f2  9808              LDR      r0,[sp,#0x20]         ;259
0001f4  2800              CMP      r0,#0                 ;259
0001f6  dc02              BGT      |L1.510|
0001f8  f04f30ff          MOV      r0,#0xffffffff        ;259
0001fc  e723              B        |L1.70|
                  |L1.510|
0001fe  9808              LDR      r0,[sp,#0x20]         ;260
000200  4404              ADD      r4,r4,r0              ;260
000202  e095              B        |L1.816|
                  |L1.516|
000204  5d70              LDRB     r0,[r6,r5]            ;261
000206  2828              CMP      r0,#0x28              ;261
000208  d170              BNE      |L1.748|
00020a  f04f30ff          MOV      r0,#0xffffffff        ;262
00020e  9008              STR      r0,[sp,#0x20]         ;262
000210  9813              LDR      r0,[sp,#0x4c]         ;263
000212  1c40              ADDS     r0,r0,#1              ;263
000214  9013              STR      r0,[sp,#0x4c]         ;263
000216  f8da1640          LDR      r1,[r10,#0x640]       ;264
00021a  9813              LDR      r0,[sp,#0x4c]         ;264
00021c  4281              CMP      r1,r0                 ;264
00021e  dc02              BGT      |L1.550|
000220  f06f0003          MVN      r0,#3                 ;264
000224  e70f              B        |L1.70|
                  |L1.550|
000226  19e8              ADDS     r0,r5,r7              ;268
000228  eba80000          SUB      r0,r8,r0              ;268
00022c  2800              CMP      r0,#0                 ;268
00022e  dc09              BGT      |L1.580|
000230  eba90104          SUB      r1,r9,r4              ;270
000234  eb0b0004          ADD      r0,r11,r4             ;270
000238  4652              MOV      r2,r10                ;270
00023a  9b13              LDR      r3,[sp,#0x4c]         ;270
00023c  f7fffffe          BL       ||doh||
000240  9008              STR      r0,[sp,#0x20]         ;270
000242  e034              B        |L1.686|
                  |L1.580|
000244  2000              MOVS     r0,#0                 ;273
000246  9007              STR      r0,[sp,#0x1c]         ;273
000248  e02a              B        |L1.672|
                  |L1.586|
00024a  9a07              LDR      r2,[sp,#0x1c]         ;274
00024c  4422              ADD      r2,r2,r4              ;274
00024e  eba90102          SUB      r1,r9,r2              ;274
000252  eb0b0004          ADD      r0,r11,r4             ;274
000256  4652              MOV      r2,r10                ;274
000258  9b13              LDR      r3,[sp,#0x4c]         ;274
00025a  f7fffffe          BL       ||doh||
00025e  9008              STR      r0,[sp,#0x20]         ;274
000260  2800              CMP      r0,#0                 ;274
000262  db1a              BLT      |L1.666|
000264  9813              LDR      r0,[sp,#0x4c]         ;275
000266  e9cda000          STRD     r10,r0,[sp,#0]        ;275
00026a  f8ddc020          LDR      r12,[sp,#0x20]        ;275
00026e  44a4              ADD      r12,r12,r4            ;275
000270  eba9030c          SUB      r3,r9,r12             ;275
000274  eb0b0e04          ADD      lr,r11,r4             ;275
000278  f8ddc020          LDR      r12,[sp,#0x20]        ;275
00027c  eb0e020c          ADD      r2,lr,r12             ;275
000280  eb050c07          ADD      r12,r5,r7             ;275
000284  eba8010c          SUB      r1,r8,r12             ;275
000288  eb060c05          ADD      r12,r6,r5             ;275
00028c  eb0c0007          ADD      r0,r12,r7             ;275
000290  f7fffffe          BL       bar
000294  2800              CMP      r0,#0                 ;275
000296  db00              BLT      |L1.666|
000298  e007              B        |L1.682|
                  |L1.666|
00029a  9807              LDR      r0,[sp,#0x1c]         ;273
00029c  1c40              ADDS     r0,r0,#1              ;273
00029e  9007              STR      r0,[sp,#0x1c]         ;273
                  |L1.672|
0002a0  eba90104          SUB      r1,r9,r4              ;273
0002a4  9807              LDR      r0,[sp,#0x1c]         ;273
0002a6  4281              CMP      r1,r0                 ;273
0002a8  dacf              BGE      |L1.586|
                  |L1.682|
0002aa  bf00              NOP                            ;276
0002ac  bf00              NOP                            ;278
                  |L1.686|
0002ae  9808              LDR      r0,[sp,#0x20]         ;281
0002b0  2800              CMP      r0,#0                 ;281
0002b2  da01              BGE      |L1.696|
0002b4  9808              LDR      r0,[sp,#0x20]         ;281
0002b6  e6c6              B        |L1.70|
                  |L1.696|
0002b8  f8da0968          LDR      r0,[r10,#0x968]       ;282
0002bc  b190              CBZ      r0,|L1.740|
0002be  9808              LDR      r0,[sp,#0x20]         ;282
0002c0  2800              CMP      r0,#0                 ;282
0002c2  dd0f              BLE      |L1.740|
0002c4  eb0b0104          ADD      r1,r11,r4             ;283
0002c8  f8da2968          LDR      r2,[r10,#0x968]       ;283
0002cc  9813              LDR      r0,[sp,#0x4c]         ;283
0002ce  1e40              SUBS     r0,r0,#1              ;283
0002d0  f8421030          STR      r1,[r2,r0,LSL #3]     ;283
0002d4  9908              LDR      r1,[sp,#0x20]         ;284
0002d6  f8da2968          LDR      r2,[r10,#0x968]       ;284
0002da  9813              LDR      r0,[sp,#0x4c]         ;284
0002dc  1e40              SUBS     r0,r0,#1              ;284
0002de  eb0200c0          ADD      r0,r2,r0,LSL #3       ;284
0002e2  6041              STR      r1,[r0,#4]            ;284
                  |L1.740|
0002e4  9808              LDR      r0,[sp,#0x20]         ;286
0002e6  4404              ADD      r4,r4,r0              ;286
0002e8  e022              B        |L1.816|
0002ea  e7ff              B        |L1.748|
                  |L1.748|
0002ec  5d70              LDRB     r0,[r6,r5]            ;287
0002ee  285e              CMP      r0,#0x5e              ;287
0002f0  d103              BNE      |L1.762|
0002f2  b1ec              CBZ      r4,|L1.816|
0002f4  f04f30ff          MOV      r0,#0xffffffff        ;288
0002f8  e6a5              B        |L1.70|
                  |L1.762|
0002fa  5d70              LDRB     r0,[r6,r5]            ;289
0002fc  2824              CMP      r0,#0x24              ;289
0002fe  d104              BNE      |L1.778|
000300  454c              CMP      r4,r9                 ;290
000302  d015              BEQ      |L1.816|
000304  f04f30ff          MOV      r0,#0xffffffff        ;290
000308  e69d              B        |L1.70|
                  |L1.778|
00030a  454c              CMP      r4,r9                 ;292
00030c  db02              BLT      |L1.788|
00030e  f04f30ff          MOV      r0,#0xffffffff        ;292
000312  e698              B        |L1.70|
                  |L1.788|
000314  eb0b0104          ADD      r1,r11,r4             ;293
000318  1970              ADDS     r0,r6,r5              ;293
00031a  4652              MOV      r2,r10                ;293
00031c  f7fffffe          BL       match_op
000320  9008              STR      r0,[sp,#0x20]         ;293
000322  9808              LDR      r0,[sp,#0x20]         ;294
000324  2800              CMP      r0,#0                 ;294
000326  dc01              BGT      |L1.812|
000328  9808              LDR      r0,[sp,#0x20]         ;294
00032a  e68c              B        |L1.70|
                  |L1.812|
00032c  9808              LDR      r0,[sp,#0x20]         ;295
00032e  4404              ADD      r4,r4,r0              ;295
                  |L1.816|
000330  bf00              NOP                            ;253
                  |L1.818|
000332  443d              ADD      r5,r5,r7              ;188
                  |L1.820|
000334  4545              CMP      r5,r8                 ;188
000336  da02              BGE      |L1.830|
000338  454c              CMP      r4,r9                 ;188
00033a  f77fae6e          BLE      |L1.26|
                  |L1.830|
00033e  4620              MOV      r0,r4                 ;299
000340  e681              B        |L1.70|
;;;301    
                          ENDP


                          AREA ||i.baz||, CODE, READONLY, ALIGN=1

                  baz PROC
;;;320    
;;;321    static int baz(const char *s, int s_len, struct regex_info *info) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;322      int i, result = -1, is_anchored = info->brackets[0].ptr[0] == '^';
00000a  f04f36ff          MOV      r6,#0xffffffff
00000e  f8d80000          LDR      r0,[r8,#0]
000012  7800              LDRB     r0,[r0,#0]
000014  285e              CMP      r0,#0x5e
000016  d101              BNE      |L2.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L2.30|
                  |L2.28|
00001c  2000              MOVS     r0,#0
                  |L2.30|
00001e  4681              MOV      r9,r0
;;;323    
;;;324      for (i = 0; i <= s_len; i++) {
000020  2400              MOVS     r4,#0
000022  e00f              B        |L2.68|
                  |L2.36|
;;;325        result = doh(s + i, s_len - i, info, 0);
000024  1b29              SUBS     r1,r5,r4
000026  1938              ADDS     r0,r7,r4
000028  2300              MOVS     r3,#0
00002a  4642              MOV      r2,r8
00002c  f7fffffe          BL       ||doh||
000030  4606              MOV      r6,r0
;;;326        if (result >= 0) {
000032  2e00              CMP      r6,#0
000034  db01              BLT      |L2.58|
;;;327          result += i;
000036  4426              ADD      r6,r6,r4
;;;328          break;
000038  e006              B        |L2.72|
                  |L2.58|
;;;329        }
;;;330        if (is_anchored) break;
00003a  f1b90f00          CMP      r9,#0
00003e  d000              BEQ      |L2.66|
000040  e002              B        |L2.72|
                  |L2.66|
000042  1c64              ADDS     r4,r4,#1              ;324
                  |L2.68|
000044  42ac              CMP      r4,r5                 ;324
000046  dded              BLE      |L2.36|
                  |L2.72|
000048  bf00              NOP                            ;328
;;;331      }
;;;332    
;;;333      return result;
00004a  4630              MOV      r0,r6
;;;334    }
00004c  e8bd87f0          POP      {r4-r10,pc}
;;;335    
                          ENDP


                          AREA ||i.doh||, CODE, READONLY, ALIGN=1

                  ||doh|| PROC
;;;302    /* Process branch points */
;;;303    static int doh(const char *s, int s_len, struct regex_info *info, int bi) {
000000  e92d4ffe          PUSH     {r1-r11,lr}
000004  4682              MOV      r10,r0
000006  468b              MOV      r11,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;304      const struct bracket_pair *b = &info->brackets[bi];
00000c  eb051407          ADD      r4,r5,r7,LSL #4
;;;305      int i = 0, len, result;
000010  2600              MOVS     r6,#0
;;;306      const char *p;
;;;307    
;;;308      do {
000012  bf00              NOP      
                  |L3.20|
;;;309        p = i == 0 ? b->ptr : info->branches[b->branches + i - 1].schlong + 1;
000014  b90e              CBNZ     r6,|L3.26|
000016  6820              LDR      r0,[r4,#0]
000018  e008              B        |L3.44|
                  |L3.26|
00001a  68a0              LDR      r0,[r4,#8]
00001c  4430              ADD      r0,r0,r6
00001e  1e40              SUBS     r0,r0,#1
000020  f2056144          ADD      r1,r5,#0x644
000024  eb0100c0          ADD      r0,r1,r0,LSL #3
000028  6840              LDR      r0,[r0,#4]
00002a  1c40              ADDS     r0,r0,#1
                  |L3.44|
00002c  4681              MOV      r9,r0
;;;310        len = b->num_branches == 0 ? b->len :
00002e  68e0              LDR      r0,[r4,#0xc]
000030  b908              CBNZ     r0,|L3.54|
000032  6860              LDR      r0,[r4,#4]
000034  e011              B        |L3.90|
                  |L3.54|
;;;311          i == b->num_branches ? (int) (b->ptr + b->len - p) :
000036  68e0              LDR      r0,[r4,#0xc]
000038  42b0              CMP      r0,r6
00003a  d105              BNE      |L3.72|
00003c  e9d40100          LDRD     r0,r1,[r4,#0]
000040  4408              ADD      r0,r0,r1
000042  eba00009          SUB      r0,r0,r9
000046  e008              B        |L3.90|
                  |L3.72|
;;;312          (int) (info->branches[b->branches + i].schlong - p);
000048  68a0              LDR      r0,[r4,#8]
00004a  1981              ADDS     r1,r0,r6
00004c  f2056044          ADD      r0,r5,#0x644
000050  eb0000c1          ADD      r0,r0,r1,LSL #3
000054  6840              LDR      r0,[r0,#4]
000056  eba00009          SUB      r0,r0,r9
                  |L3.90|
00005a  9002              STR      r0,[sp,#8]
;;;313        DBG(("%s %d %d [%.*s] [%.*s]\n", __func__, bi, i, len, p, s_len, s));
;;;314        result = bar(p, len, s, s_len, info, bi);
00005c  465b              MOV      r3,r11
00005e  4652              MOV      r2,r10
000060  e9cd5700          STRD     r5,r7,[sp,#0]
000064  4648              MOV      r0,r9
000066  9902              LDR      r1,[sp,#8]
000068  f7fffffe          BL       bar
00006c  4680              MOV      r8,r0
;;;315        DBG(("%s <- %d\n", __func__, result));
;;;316      } while (result <= 0 && i++ < b->num_branches);  /* At least 1 iteration */
00006e  f1b80f00          CMP      r8,#0
000072  dc04              BGT      |L3.126|
000074  4630              MOV      r0,r6
000076  1c76              ADDS     r6,r6,#1
000078  68e1              LDR      r1,[r4,#0xc]
00007a  4288              CMP      r0,r1
00007c  dbca              BLT      |L3.20|
                  |L3.126|
;;;317    
;;;318      return result;
00007e  4640              MOV      r0,r8
;;;319    }
000080  e8bd8ffe          POP      {r1-r11,pc}
;;;320    
                          ENDP


                          AREA ||i.foo||, CODE, READONLY, ALIGN=1

                  ||foo|| PROC
;;;364    
;;;365    static int foo(const char *re, int re_len, const char *s, int s_len,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;366                   struct regex_info *info) {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4692              MOV      r10,r2
00000a  9c0e              LDR      r4,[sp,#0x38]
;;;367      int i, step, depth = 0;
00000c  f04f0800          MOV      r8,#0
;;;368    
;;;369      /* First bracket captures everything */
;;;370      info->brackets[0].ptr = re;
000010  6026              STR      r6,[r4,#0]
;;;371      info->brackets[0].len = re_len;
000012  6067              STR      r7,[r4,#4]
;;;372      info->num_brackets = 1;
000014  2001              MOVS     r0,#1
000016  f8c40640          STR      r0,[r4,#0x640]
;;;373    
;;;374      /* Make a single pass over regex string, memorize brackets and branches */
;;;375      for (i = 0; i < re_len; i += step) {
00001a  2500              MOVS     r5,#0
00001c  e0ca              B        |L4.436|
                  |L4.30|
;;;376        step = get_op_len(re + i, re_len - i);
00001e  1b79              SUBS     r1,r7,r5
000020  1970              ADDS     r0,r6,r5
000022  f7fffffe          BL       get_op_len
000026  4681              MOV      r9,r0
;;;377    
;;;378        if (re[i] == '|') {
000028  5d70              LDRB     r0,[r6,r5]
00002a  287c              CMP      r0,#0x7c
00002c  d129              BNE      |L4.130|
;;;379          FAIL_IF(info->num_branches >= (int) ARRAY_SIZE(info->branches),
00002e  f8d40964          LDR      r0,[r4,#0x964]
000032  2864              CMP      r0,#0x64
000034  db04              BLT      |L4.64|
000036  f06f0007          MVN      r0,#7
                  |L4.58|
;;;380                  SLRE_TOO_MANY_BRANCHES);
;;;381          info->branches[info->num_branches].bracket_index =
;;;382            info->brackets[info->num_brackets - 1].len == -1 ?
;;;383            info->num_brackets - 1 : depth;
;;;384          info->branches[info->num_branches].schlong = &re[i];
;;;385          info->num_branches++;
;;;386        } else if (re[i] == '\\') {
;;;387          FAIL_IF(i >= re_len - 1, SLRE_INVALID_METACHARACTER);
;;;388          if (re[i + 1] == 'x') {
;;;389            /* Hex digit specification must follow */
;;;390            FAIL_IF(re[i + 1] == 'x' && i >= re_len - 3,
;;;391                    SLRE_INVALID_METACHARACTER);
;;;392            FAIL_IF(re[i + 1] ==  'x' && !(isxdigit(re[i + 2]) &&
;;;393                    isxdigit(re[i + 3])), SLRE_INVALID_METACHARACTER);
;;;394          } else {
;;;395            FAIL_IF(!is_metacharacter((const unsigned char *) re + i + 1),
;;;396                    SLRE_INVALID_METACHARACTER);
;;;397          }
;;;398        } else if (re[i] == '(') {
;;;399          FAIL_IF(info->num_brackets >= (int) ARRAY_SIZE(info->brackets),
;;;400                  SLRE_TOO_MANY_BRACKETS);
;;;401          depth++;  /* Order is important here. Depth increments first. */
;;;402          info->brackets[info->num_brackets].ptr = re + i + 1;
;;;403          info->brackets[info->num_brackets].len = -1;
;;;404          info->num_brackets++;
;;;405          FAIL_IF(info->num_caps > 0 && info->num_brackets - 1 > info->num_caps,
;;;406                  SLRE_CAPS_ARRAY_TOO_SMALL);
;;;407        } else if (re[i] == ')') {
;;;408          int ind = info->brackets[info->num_brackets - 1].len == -1 ?
;;;409            info->num_brackets - 1 : depth;
;;;410          info->brackets[ind].len = (int) (&re[i] - info->brackets[ind].ptr);
;;;411          DBG(("SETTING BRACKET %d [%.*s]\n",
;;;412               ind, info->brackets[ind].len, info->brackets[ind].ptr));
;;;413          depth--;
;;;414          FAIL_IF(depth < 0, SLRE_UNBALANCED_BRACKETS);
;;;415          FAIL_IF(i > 0 && re[i - 1] == '(', SLRE_NO_MATCH);
;;;416        }
;;;417      }
;;;418    
;;;419      FAIL_IF(depth != 0, SLRE_UNBALANCED_BRACKETS);
;;;420      setup_branch_points(info);
;;;421    
;;;422      return baz(s, s_len, info);
;;;423    }
00003a  b004              ADD      sp,sp,#0x10
00003c  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.64|
000040  f8d40640          LDR      r0,[r4,#0x640]        ;381
000044  1e40              SUBS     r0,r0,#1              ;381
000046  eb041000          ADD      r0,r4,r0,LSL #4       ;381
00004a  6840              LDR      r0,[r0,#4]            ;381
00004c  1c40              ADDS     r0,r0,#1              ;381
00004e  b918              CBNZ     r0,|L4.88|
000050  f8d40640          LDR      r0,[r4,#0x640]        ;383
000054  1e40              SUBS     r0,r0,#1              ;383
000056  e000              B        |L4.90|
                  |L4.88|
000058  4640              MOV      r0,r8                 ;383
                  |L4.90|
00005a  f2046144          ADD      r1,r4,#0x644          ;383
00005e  f8d42964          LDR      r2,[r4,#0x964]        ;383
000062  f8410032          STR      r0,[r1,r2,LSL #3]     ;383
000066  1971              ADDS     r1,r6,r5              ;384
000068  f2046044          ADD      r0,r4,#0x644          ;384
00006c  f8d42964          LDR      r2,[r4,#0x964]        ;384
000070  eb0000c2          ADD      r0,r0,r2,LSL #3       ;384
000074  6041              STR      r1,[r0,#4]            ;384
000076  f8d40964          LDR      r0,[r4,#0x964]        ;385
00007a  1c40              ADDS     r0,r0,#1              ;385
00007c  f8c40964          STR      r0,[r4,#0x964]        ;385
000080  e097              B        |L4.434|
                  |L4.130|
000082  5d70              LDRB     r0,[r6,r5]            ;386
000084  285c              CMP      r0,#0x5c              ;386
000086  d13b              BNE      |L4.256|
000088  1e78              SUBS     r0,r7,#1              ;387
00008a  42a8              CMP      r0,r5                 ;387
00008c  dc02              BGT      |L4.148|
00008e  f06f0005          MVN      r0,#5                 ;387
000092  e7d2              B        |L4.58|
                  |L4.148|
000094  1c68              ADDS     r0,r5,#1              ;388
000096  5c30              LDRB     r0,[r6,r0]            ;388
000098  2878              CMP      r0,#0x78              ;388
00009a  d129              BNE      |L4.240|
00009c  1c68              ADDS     r0,r5,#1              ;390
00009e  5c30              LDRB     r0,[r6,r0]            ;390
0000a0  2878              CMP      r0,#0x78              ;390
0000a2  d105              BNE      |L4.176|
0000a4  1ef8              SUBS     r0,r7,#3              ;390
0000a6  42a8              CMP      r0,r5                 ;390
0000a8  dc02              BGT      |L4.176|
0000aa  f06f0005          MVN      r0,#5                 ;390
0000ae  e7c4              B        |L4.58|
                  |L4.176|
0000b0  1c68              ADDS     r0,r5,#1              ;392
0000b2  5c30              LDRB     r0,[r6,r0]            ;392
0000b4  2878              CMP      r0,#0x78              ;392
0000b6  d17c              BNE      |L4.434|
0000b8  f7fffffe          BL       __rt_ctype_table
0000bc  6801              LDR      r1,[r0,#0]            ;392
0000be  1ca8              ADDS     r0,r5,#2              ;392
0000c0  5c30              LDRB     r0,[r6,r0]            ;392
0000c2  f811b000          LDRB     r11,[r1,r0]           ;392
0000c6  ea8b008b          EOR      r0,r11,r11,LSL #2     ;392
0000ca  f0000080          AND      r0,r0,#0x80           ;392
0000ce  b160              CBZ      r0,|L4.234|
0000d0  f7fffffe          BL       __rt_ctype_table
0000d4  6801              LDR      r1,[r0,#0]            ;392
0000d6  1ce8              ADDS     r0,r5,#3              ;392
0000d8  5c30              LDRB     r0,[r6,r0]            ;392
0000da  f811b000          LDRB     r11,[r1,r0]           ;392
0000de  ea8b008b          EOR      r0,r11,r11,LSL #2     ;392
0000e2  f0000080          AND      r0,r0,#0x80           ;392
0000e6  2800              CMP      r0,#0                 ;392
0000e8  d163              BNE      |L4.434|
                  |L4.234|
0000ea  f06f0005          MVN      r0,#5                 ;392
0000ee  e7a4              B        |L4.58|
                  |L4.240|
0000f0  1971              ADDS     r1,r6,r5              ;395
0000f2  1c48              ADDS     r0,r1,#1              ;395
0000f4  f7fffffe          BL       is_metacharacter
0000f8  2800              CMP      r0,#0                 ;395
0000fa  d15a              BNE      |L4.434|
0000fc  1f80              SUBS     r0,r0,#6              ;395
0000fe  e79c              B        |L4.58|
                  |L4.256|
000100  5d70              LDRB     r0,[r6,r5]            ;398
000102  2828              CMP      r0,#0x28              ;398
000104  d129              BNE      |L4.346|
000106  f8d40640          LDR      r0,[r4,#0x640]        ;399
00010a  2864              CMP      r0,#0x64              ;399
00010c  db02              BLT      |L4.276|
00010e  f06f0008          MVN      r0,#8                 ;399
000112  e792              B        |L4.58|
                  |L4.276|
000114  f1080801          ADD      r8,r8,#1              ;401
000118  1970              ADDS     r0,r6,r5              ;402
00011a  1c40              ADDS     r0,r0,#1              ;402
00011c  f8d41640          LDR      r1,[r4,#0x640]        ;402
000120  eb041101          ADD      r1,r4,r1,LSL #4       ;402
000124  6008              STR      r0,[r1,#0]            ;402
000126  f04f30ff          MOV      r0,#0xffffffff        ;403
00012a  f8d41640          LDR      r1,[r4,#0x640]        ;403
00012e  eb041101          ADD      r1,r4,r1,LSL #4       ;403
000132  6048              STR      r0,[r1,#4]            ;403
000134  f8d40640          LDR      r0,[r4,#0x640]        ;404
000138  1c40              ADDS     r0,r0,#1              ;404
00013a  f8c40640          STR      r0,[r4,#0x640]        ;404
00013e  f8d4096c          LDR      r0,[r4,#0x96c]        ;405
000142  2800              CMP      r0,#0                 ;405
000144  dd35              BLE      |L4.434|
000146  f8d40640          LDR      r0,[r4,#0x640]        ;405
00014a  1e40              SUBS     r0,r0,#1              ;405
00014c  f8d4196c          LDR      r1,[r4,#0x96c]        ;405
000150  4288              CMP      r0,r1                 ;405
000152  dd2e              BLE      |L4.434|
000154  f06f0006          MVN      r0,#6                 ;405
000158  e76f              B        |L4.58|
                  |L4.346|
00015a  5d70              LDRB     r0,[r6,r5]            ;407
00015c  2829              CMP      r0,#0x29              ;407
00015e  d128              BNE      |L4.434|
000160  f8d40640          LDR      r0,[r4,#0x640]        ;408
000164  1e40              SUBS     r0,r0,#1              ;408
000166  eb041000          ADD      r0,r4,r0,LSL #4       ;408
00016a  6840              LDR      r0,[r0,#4]            ;408
00016c  1c40              ADDS     r0,r0,#1              ;408
00016e  b918              CBNZ     r0,|L4.376|
000170  f8d40640          LDR      r0,[r4,#0x640]        ;409
000174  1e40              SUBS     r0,r0,#1              ;409
000176  e000              B        |L4.378|
                  |L4.376|
000178  4640              MOV      r0,r8                 ;409
                  |L4.378|
00017a  4601              MOV      r1,r0                 ;409
00017c  1970              ADDS     r0,r6,r5              ;410
00017e  eb041201          ADD      r2,r4,r1,LSL #4       ;410
000182  6812              LDR      r2,[r2,#0]            ;410
000184  1a80              SUBS     r0,r0,r2              ;410
000186  eb041201          ADD      r2,r4,r1,LSL #4       ;410
00018a  6050              STR      r0,[r2,#4]            ;410
00018c  f1a80801          SUB      r8,r8,#1              ;413
000190  f1b80f00          CMP      r8,#0                 ;414
000194  da03              BGE      |L4.414|
000196  f06f0002          MVN      r0,#2                 ;414
00019a  e74e              B        |L4.58|
00019c  e009              B        |L4.434|
                  |L4.414|
00019e  2d00              CMP      r5,#0                 ;415
0001a0  dd06              BLE      |L4.432|
0001a2  1e68              SUBS     r0,r5,#1              ;415
0001a4  5c30              LDRB     r0,[r6,r0]            ;415
0001a6  2828              CMP      r0,#0x28              ;415
0001a8  d102              BNE      |L4.432|
0001aa  f04f30ff          MOV      r0,#0xffffffff        ;415
0001ae  e744              B        |L4.58|
                  |L4.432|
0001b0  bf00              NOP                            ;416
                  |L4.434|
0001b2  444d              ADD      r5,r5,r9              ;375
                  |L4.436|
0001b4  42bd              CMP      r5,r7                 ;375
0001b6  f6ffaf32          BLT      |L4.30|
0001ba  f1b80f00          CMP      r8,#0                 ;419
0001be  d002              BEQ      |L4.454|
0001c0  f06f0002          MVN      r0,#2                 ;419
0001c4  e739              B        |L4.58|
                  |L4.454|
0001c6  4620              MOV      r0,r4                 ;420
0001c8  f7fffffe          BL       setup_branch_points
0001cc  4622              MOV      r2,r4                 ;422
0001ce  4650              MOV      r0,r10                ;422
0001d0  9903              LDR      r1,[sp,#0xc]          ;422
0001d2  f7fffffe          BL       baz
0001d6  e730              B        |L4.58|
;;;424    
                          ENDP


                          AREA ||i.get_op_len||, CODE, READONLY, ALIGN=1

                  get_op_len PROC
;;;94     
;;;95     static int get_op_len(const char *re, int re_len) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;96       return re[0] == '[' ? set_len(re + 1, re_len - 1) + 1 : op_len(re);
000006  7820              LDRB     r0,[r4,#0]
000008  285b              CMP      r0,#0x5b
00000a  d105              BNE      |L5.24|
00000c  1e69              SUBS     r1,r5,#1
00000e  1c60              ADDS     r0,r4,#1
000010  f7fffffe          BL       set_len
000014  1c40              ADDS     r0,r0,#1
                  |L5.22|
;;;97     }
000016  bd70              POP      {r4-r6,pc}
                  |L5.24|
000018  4620              MOV      r0,r4                 ;96
00001a  f7fffffe          BL       op_len
00001e  e7fa              B        |L5.22|
;;;98     
                          ENDP


                          AREA ||i.hextoi||, CODE, READONLY, ALIGN=1

                  hextoi PROC
;;;106    
;;;107    static int hextoi(const unsigned char *s) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;108      return (toi(tolower(s[0])) << 4) | toi(tolower(s[1]));
000004  7860              LDRB     r0,[r4,#1]
000006  f7fffffe          BL       tolower
00000a  4605              MOV      r5,r0
00000c  f7fffffe          BL       toi
000010  4606              MOV      r6,r0
000012  7820              LDRB     r0,[r4,#0]
000014  f7fffffe          BL       tolower
000018  4605              MOV      r5,r0
00001a  f7fffffe          BL       toi
00001e  ea461000          ORR      r0,r6,r0,LSL #4
;;;109    }
000022  bd70              POP      {r4-r6,pc}
;;;110    
                          ENDP


                          AREA ||i.is_metacharacter||, CODE, READONLY, ALIGN=2

                  is_metacharacter PROC
;;;75     
;;;76     static int is_metacharacter(const unsigned char *s) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;77       static const char *metacharacters = "^$().[]*+?|\\Ssdbfnrtv";
;;;78       return strchr(metacharacters, *s) != NULL;
000004  7821              LDRB     r1,[r4,#0]
000006  4804              LDR      r0,|L7.24|
000008  6800              LDR      r0,[r0,#0]  ; metacharacters
00000a  f7fffffe          BL       strchr
00000e  b108              CBZ      r0,|L7.20|
000010  2001              MOVS     r0,#1
                  |L7.18|
;;;79     }
000012  bd10              POP      {r4,pc}
                  |L7.20|
000014  2000              MOVS     r0,#0                 ;78
000016  e7fc              B        |L7.18|
;;;80     
                          ENDP

                  |L7.24|
                          DCD      metacharacters

                          AREA ||i.is_quantifier||, CODE, READONLY, ALIGN=1

                  is_quantifier PROC
;;;98     
;;;99     static int is_quantifier(const char *re) {
000000  4601              MOV      r1,r0
;;;100      return re[0] == '*' || re[0] == '+' || re[0] == '?';
000002  7808              LDRB     r0,[r1,#0]
000004  282a              CMP      r0,#0x2a
000006  d005              BEQ      |L8.20|
000008  7808              LDRB     r0,[r1,#0]
00000a  282b              CMP      r0,#0x2b
00000c  d002              BEQ      |L8.20|
00000e  7808              LDRB     r0,[r1,#0]
000010  283f              CMP      r0,#0x3f
000012  d101              BNE      |L8.24|
                  |L8.20|
000014  2001              MOVS     r0,#1
                  |L8.22|
;;;101    }
000016  4770              BX       lr
                  |L8.24|
000018  2000              MOVS     r0,#0                 ;100
00001a  e7fc              B        |L8.22|
;;;102    
                          ENDP


                          AREA ||i.match_op||, CODE, READONLY, ALIGN=1

                  match_op PROC
;;;110    
;;;111    static int match_op(const unsigned char *re, const unsigned char *s,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;112                        struct regex_info *info) {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;113      int result = 0;
00000a  2500              MOVS     r5,#0
;;;114      switch (*re) {
00000c  7830              LDRB     r0,[r6,#0]
00000e  2824              CMP      r0,#0x24
000010  d06f              BEQ      |L9.242|
000012  282e              CMP      r0,#0x2e
000014  d06e              BEQ      |L9.244|
000016  285c              CMP      r0,#0x5c
000018  d002              BEQ      |L9.32|
00001a  287c              CMP      r0,#0x7c
00001c  d16b              BNE      |L9.246|
00001e  e08a              B        |L9.310|
                  |L9.32|
;;;115        case '\\':
;;;116          /* Metacharacters */
;;;117          switch (re[1]) {
000020  7870              LDRB     r0,[r6,#1]
000022  2872              CMP      r0,#0x72
000024  d055              BEQ      |L9.210|
000026  dc0c              BGT      |L9.66|
000028  2864              CMP      r0,#0x64
00002a  d02e              BEQ      |L9.138|
00002c  dc04              BGT      |L9.56|
00002e  2853              CMP      r0,#0x53
000030  d010              BEQ      |L9.84|
000032  2862              CMP      r0,#0x62
000034  d174              BNE      |L9.288|
000036  e034              B        |L9.162|
                  |L9.56|
000038  2866              CMP      r0,#0x66
00003a  d03a              BEQ      |L9.178|
00003c  286e              CMP      r0,#0x6e
00003e  d16f              BNE      |L9.288|
000040  e03f              B        |L9.194|
                  |L9.66|
000042  2873              CMP      r0,#0x73
000044  d014              BEQ      |L9.112|
000046  2874              CMP      r0,#0x74
000048  d04b              BEQ      |L9.226|
00004a  2876              CMP      r0,#0x76
00004c  d054              BEQ      |L9.248|
00004e  2878              CMP      r0,#0x78
000050  d166              BNE      |L9.288|
000052  e059              B        |L9.264|
                  |L9.84|
;;;118            case 'S': FAIL_IF(isspace(*s), SLRE_NO_MATCH); result++; break;
000054  f7fffffe          BL       __rt_ctype_table
000058  6800              LDR      r0,[r0,#0]
00005a  7821              LDRB     r1,[r4,#0]
00005c  5c40              LDRB     r0,[r0,r1]
00005e  f0000001          AND      r0,r0,#1
000062  b118              CBZ      r0,|L9.108|
000064  f04f30ff          MOV      r0,#0xffffffff
                  |L9.104|
;;;119            case 's': FAIL_IF(!isspace(*s), SLRE_NO_MATCH); result++; break;
;;;120            case 'd': FAIL_IF(!isdigit(*s), SLRE_NO_MATCH); result++; break;
;;;121            case 'b': FAIL_IF(*s != '\b', SLRE_NO_MATCH); result++; break;
;;;122            case 'f': FAIL_IF(*s != '\f', SLRE_NO_MATCH); result++; break;
;;;123            case 'n': FAIL_IF(*s != '\n', SLRE_NO_MATCH); result++; break;
;;;124            case 'r': FAIL_IF(*s != '\r', SLRE_NO_MATCH); result++; break;
;;;125            case 't': FAIL_IF(*s != '\t', SLRE_NO_MATCH); result++; break;
;;;126            case 'v': FAIL_IF(*s != '\v', SLRE_NO_MATCH); result++; break;
;;;127    
;;;128            case 'x':
;;;129              /* Match byte, \xHH where HH is hexadecimal byte representaion */
;;;130              FAIL_IF(hextoi(re + 2) != *s, SLRE_NO_MATCH);
;;;131              result++;
;;;132              break;
;;;133    
;;;134            default:
;;;135              /* Valid metacharacter check is done in bar() */
;;;136              FAIL_IF(re[1] != s[0], SLRE_NO_MATCH);
;;;137              result++;
;;;138              break;
;;;139          }
;;;140          break;
;;;141    
;;;142        case '|': FAIL_IF(1, SLRE_INTERNAL_ERROR); break;
;;;143        case '$': FAIL_IF(1, SLRE_NO_MATCH); break;
;;;144        case '.': result++; break;
;;;145    
;;;146        default:
;;;147          if (info->flags & SLRE_IGNORE_CASE) {
;;;148            FAIL_IF(tolower(*re) != tolower(*s), SLRE_NO_MATCH);
;;;149          } else {
;;;150            FAIL_IF(*re != *s, SLRE_NO_MATCH);
;;;151          }
;;;152          result++;
;;;153          break;
;;;154      }
;;;155    
;;;156      return result;
;;;157    }
000068  e8bd81f0          POP      {r4-r8,pc}
                  |L9.108|
00006c  1c6d              ADDS     r5,r5,#1              ;118
00006e  e060              B        |L9.306|
                  |L9.112|
000070  f7fffffe          BL       __rt_ctype_table
000074  6800              LDR      r0,[r0,#0]            ;119
000076  7821              LDRB     r1,[r4,#0]            ;119
000078  5c40              LDRB     r0,[r0,r1]            ;119
00007a  f0000001          AND      r0,r0,#1              ;119
00007e  b910              CBNZ     r0,|L9.134|
000080  f04f30ff          MOV      r0,#0xffffffff        ;119
000084  e7f0              B        |L9.104|
                  |L9.134|
000086  1c6d              ADDS     r5,r5,#1              ;119
000088  e053              B        |L9.306|
                  |L9.138|
00008a  f7fffffe          BL       __rt_ctype_table
00008e  6800              LDR      r0,[r0,#0]            ;120
000090  7821              LDRB     r1,[r4,#0]            ;120
000092  5c40              LDRB     r0,[r0,r1]            ;120
000094  2820              CMP      r0,#0x20              ;120
000096  d002              BEQ      |L9.158|
000098  f04f30ff          MOV      r0,#0xffffffff        ;120
00009c  e7e4              B        |L9.104|
                  |L9.158|
00009e  1c6d              ADDS     r5,r5,#1              ;120
0000a0  e047              B        |L9.306|
                  |L9.162|
0000a2  7820              LDRB     r0,[r4,#0]            ;121
0000a4  2808              CMP      r0,#8                 ;121
0000a6  d002              BEQ      |L9.174|
0000a8  f04f30ff          MOV      r0,#0xffffffff        ;121
0000ac  e7dc              B        |L9.104|
                  |L9.174|
0000ae  1c6d              ADDS     r5,r5,#1              ;121
0000b0  e03f              B        |L9.306|
                  |L9.178|
0000b2  7820              LDRB     r0,[r4,#0]            ;122
0000b4  280c              CMP      r0,#0xc               ;122
0000b6  d002              BEQ      |L9.190|
0000b8  f04f30ff          MOV      r0,#0xffffffff        ;122
0000bc  e7d4              B        |L9.104|
                  |L9.190|
0000be  1c6d              ADDS     r5,r5,#1              ;122
0000c0  e037              B        |L9.306|
                  |L9.194|
0000c2  7820              LDRB     r0,[r4,#0]            ;123
0000c4  280a              CMP      r0,#0xa               ;123
0000c6  d002              BEQ      |L9.206|
0000c8  f04f30ff          MOV      r0,#0xffffffff        ;123
0000cc  e7cc              B        |L9.104|
                  |L9.206|
0000ce  1c6d              ADDS     r5,r5,#1              ;123
0000d0  e02f              B        |L9.306|
                  |L9.210|
0000d2  7820              LDRB     r0,[r4,#0]            ;124
0000d4  280d              CMP      r0,#0xd               ;124
0000d6  d002              BEQ      |L9.222|
0000d8  f04f30ff          MOV      r0,#0xffffffff        ;124
0000dc  e7c4              B        |L9.104|
                  |L9.222|
0000de  1c6d              ADDS     r5,r5,#1              ;124
0000e0  e027              B        |L9.306|
                  |L9.226|
0000e2  7820              LDRB     r0,[r4,#0]            ;125
0000e4  2809              CMP      r0,#9                 ;125
0000e6  d002              BEQ      |L9.238|
0000e8  f04f30ff          MOV      r0,#0xffffffff        ;125
0000ec  e7bc              B        |L9.104|
                  |L9.238|
0000ee  1c6d              ADDS     r5,r5,#1              ;125
0000f0  e01f              B        |L9.306|
                  |L9.242|
0000f2  e023              B        |L9.316|
                  |L9.244|
0000f4  e025              B        |L9.322|
                  |L9.246|
0000f6  e026              B        |L9.326|
                  |L9.248|
0000f8  7820              LDRB     r0,[r4,#0]            ;126
0000fa  280b              CMP      r0,#0xb               ;126
0000fc  d002              BEQ      |L9.260|
0000fe  f04f30ff          MOV      r0,#0xffffffff        ;126
000102  e7b1              B        |L9.104|
                  |L9.260|
000104  1c6d              ADDS     r5,r5,#1              ;126
000106  e014              B        |L9.306|
                  |L9.264|
000108  1cb0              ADDS     r0,r6,#2              ;130
00010a  f7fffffe          BL       hextoi
00010e  7821              LDRB     r1,[r4,#0]            ;130
000110  4288              CMP      r0,r1                 ;130
000112  d003              BEQ      |L9.284|
000114  f04f30ff          MOV      r0,#0xffffffff        ;130
000118  e7a6              B        |L9.104|
00011a  e001              B        |L9.288|
                  |L9.284|
00011c  1c6d              ADDS     r5,r5,#1              ;131
00011e  e008              B        |L9.306|
                  |L9.288|
000120  7870              LDRB     r0,[r6,#1]            ;136
000122  7821              LDRB     r1,[r4,#0]            ;136
000124  4288              CMP      r0,r1                 ;136
000126  d002              BEQ      |L9.302|
000128  f04f30ff          MOV      r0,#0xffffffff        ;136
00012c  e79c              B        |L9.104|
                  |L9.302|
00012e  1c6d              ADDS     r5,r5,#1              ;137
000130  bf00              NOP                            ;138
                  |L9.306|
000132  bf00              NOP                            ;118
000134  e021              B        |L9.378|
                  |L9.310|
000136  f06f0003          MVN      r0,#3                 ;142
00013a  e795              B        |L9.104|
                  |L9.316|
00013c  f04f30ff          MOV      r0,#0xffffffff        ;143
000140  e792              B        |L9.104|
                  |L9.322|
000142  1c6d              ADDS     r5,r5,#1              ;144
000144  e019              B        |L9.378|
                  |L9.326|
000146  f8970970          LDRB     r0,[r7,#0x970]        ;147
00014a  f0000001          AND      r0,r0,#1              ;147
00014e  b158              CBZ      r0,|L9.360|
000150  7830              LDRB     r0,[r6,#0]            ;148
000152  f7fffffe          BL       tolower
000156  4680              MOV      r8,r0                 ;148
000158  7820              LDRB     r0,[r4,#0]            ;148
00015a  f7fffffe          BL       tolower
00015e  4580              CMP      r8,r0                 ;148
000160  d009              BEQ      |L9.374|
000162  f04f30ff          MOV      r0,#0xffffffff        ;148
000166  e77f              B        |L9.104|
                  |L9.360|
000168  7830              LDRB     r0,[r6,#0]            ;150
00016a  7821              LDRB     r1,[r4,#0]            ;150
00016c  4288              CMP      r0,r1                 ;150
00016e  d002              BEQ      |L9.374|
000170  f04f30ff          MOV      r0,#0xffffffff        ;150
000174  e778              B        |L9.104|
                  |L9.374|
000176  1c6d              ADDS     r5,r5,#1              ;152
000178  bf00              NOP                            ;153
                  |L9.378|
00017a  bf00              NOP                            ;140
00017c  4628              MOV      r0,r5                 ;156
00017e  e773              B        |L9.104|
;;;158    
                          ENDP


                          AREA ||i.match_set||, CODE, READONLY, ALIGN=1

                  match_set PROC
;;;158    
;;;159    static int match_set(const char *re, int re_len, const char *s,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;160                         struct regex_info *info) {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  4698              MOV      r8,r3
;;;161      int len = 0, result = -1, invert = re[0] == '^';
00000c  2500              MOVS     r5,#0
00000e  f04f39ff          MOV      r9,#0xffffffff
000012  7820              LDRB     r0,[r4,#0]
000014  285e              CMP      r0,#0x5e
000016  d101              BNE      |L10.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L10.30|
                  |L10.28|
00001c  2000              MOVS     r0,#0
                  |L10.30|
00001e  4682              MOV      r10,r0
;;;162    
;;;163      if (invert) re++, re_len--;
000020  f1ba0f00          CMP      r10,#0
000024  d001              BEQ      |L10.42|
000026  1c64              ADDS     r4,r4,#1
000028  1e7f              SUBS     r7,r7,#1
                  |L10.42|
;;;164    
;;;165      while (len <= re_len && re[len] != ']' && result <= 0) {
00002a  e042              B        |L10.178|
                  |L10.44|
;;;166        /* Support character range */
;;;167        if (re[len] != '-' && re[len + 1] == '-' && re[len + 2] != ']' &&
00002c  5d60              LDRB     r0,[r4,r5]
00002e  282d              CMP      r0,#0x2d
000030  d035              BEQ      |L10.158|
000032  1c68              ADDS     r0,r5,#1
000034  5c20              LDRB     r0,[r4,r0]
000036  282d              CMP      r0,#0x2d
000038  d131              BNE      |L10.158|
00003a  1ca8              ADDS     r0,r5,#2
00003c  5c20              LDRB     r0,[r4,r0]
00003e  285d              CMP      r0,#0x5d
000040  d02d              BEQ      |L10.158|
;;;168            re[len + 2] != '\0') {
000042  1ca8              ADDS     r0,r5,#2
000044  5c20              LDRB     r0,[r4,r0]
000046  b350              CBZ      r0,|L10.158|
;;;169          result = info->flags &  SLRE_IGNORE_CASE ?
000048  f8980970          LDRB     r0,[r8,#0x970]
00004c  f0000001          AND      r0,r0,#1
000050  b1b0              CBZ      r0,|L10.128|
;;;170            tolower(*s) >= tolower(re[len]) && tolower(*s) <= tolower(re[len + 2]) :
000052  7830              LDRB     r0,[r6,#0]
000054  f7fffffe          BL       tolower
000058  4683              MOV      r11,r0
00005a  5d60              LDRB     r0,[r4,r5]
00005c  f7fffffe          BL       tolower
000060  4583              CMP      r11,r0
000062  db0b              BLT      |L10.124|
000064  7830              LDRB     r0,[r6,#0]
000066  f7fffffe          BL       tolower
00006a  4683              MOV      r11,r0
00006c  1ca9              ADDS     r1,r5,#2
00006e  5c60              LDRB     r0,[r4,r1]
000070  f7fffffe          BL       tolower
000074  4583              CMP      r11,r0
000076  dc01              BGT      |L10.124|
000078  2001              MOVS     r0,#1
00007a  e00d              B        |L10.152|
                  |L10.124|
00007c  2000              MOVS     r0,#0
00007e  e00b              B        |L10.152|
                  |L10.128|
;;;171            *s >= re[len] && *s <= re[len + 2];
000080  7830              LDRB     r0,[r6,#0]
000082  5d61              LDRB     r1,[r4,r5]
000084  4288              CMP      r0,r1
000086  db06              BLT      |L10.150|
000088  7831              LDRB     r1,[r6,#0]
00008a  1ca8              ADDS     r0,r5,#2
00008c  5c20              LDRB     r0,[r4,r0]
00008e  4281              CMP      r1,r0
000090  dc01              BGT      |L10.150|
000092  2001              MOVS     r0,#1
000094  e000              B        |L10.152|
                  |L10.150|
000096  2000              MOVS     r0,#0
                  |L10.152|
000098  4681              MOV      r9,r0
;;;172          len += 3;
00009a  1ced              ADDS     r5,r5,#3
00009c  e009              B        |L10.178|
                  |L10.158|
;;;173        } else {
;;;174          result = match_op((const unsigned char *) re + len, (const unsigned char *) s, info);
00009e  1960              ADDS     r0,r4,r5
0000a0  4642              MOV      r2,r8
0000a2  4631              MOV      r1,r6
0000a4  f7fffffe          BL       match_op
0000a8  4681              MOV      r9,r0
;;;175          len += op_len(re + len);
0000aa  1960              ADDS     r0,r4,r5
0000ac  f7fffffe          BL       op_len
0000b0  4405              ADD      r5,r5,r0
                  |L10.178|
0000b2  42bd              CMP      r5,r7                 ;165
0000b4  dc05              BGT      |L10.194|
0000b6  5d60              LDRB     r0,[r4,r5]            ;165
0000b8  285d              CMP      r0,#0x5d              ;165
0000ba  d002              BEQ      |L10.194|
0000bc  f1b90f00          CMP      r9,#0                 ;165
0000c0  ddb4              BLE      |L10.44|
                  |L10.194|
;;;176        }
;;;177      }
;;;178      return (!invert && result > 0) || (invert && result <= 0) ? 1 : -1;
0000c2  f1ba0f00          CMP      r10,#0
0000c6  d102              BNE      |L10.206|
0000c8  f1b90f00          CMP      r9,#0
0000cc  dc05              BGT      |L10.218|
                  |L10.206|
0000ce  f1ba0f00          CMP      r10,#0
0000d2  d005              BEQ      |L10.224|
0000d4  f1b90f00          CMP      r9,#0
0000d8  dc02              BGT      |L10.224|
                  |L10.218|
0000da  2001              MOVS     r0,#1
                  |L10.220|
;;;179    }
0000dc  e8bd9ff0          POP      {r4-r12,pc}
                  |L10.224|
0000e0  f04f30ff          MOV      r0,#0xffffffff        ;178
0000e4  e7fa              B        |L10.220|
;;;180    
                          ENDP


                          AREA ||i.op_len||, CODE, READONLY, ALIGN=1

                  op_len PROC
;;;80     
;;;81     static int op_len(const char *re) {
000000  4601              MOV      r1,r0
;;;82       return re[0] == '\\' && re[1] == 'x' ? 4 : re[0] == '\\' ? 2 : 1;
000002  7808              LDRB     r0,[r1,#0]
000004  285c              CMP      r0,#0x5c
000006  d104              BNE      |L11.18|
000008  7848              LDRB     r0,[r1,#1]
00000a  2878              CMP      r0,#0x78
00000c  d101              BNE      |L11.18|
00000e  2004              MOVS     r0,#4
                  |L11.16|
;;;83     }
000010  4770              BX       lr
                  |L11.18|
000012  7808              LDRB     r0,[r1,#0]            ;82
000014  285c              CMP      r0,#0x5c              ;82
000016  d101              BNE      |L11.28|
000018  2002              MOVS     r0,#2                 ;82
00001a  e7f9              B        |L11.16|
                  |L11.28|
00001c  2001              MOVS     r0,#1                 ;82
00001e  e7f7              B        |L11.16|
;;;84     
                          ENDP


                          AREA ||i.set_len||, CODE, READONLY, ALIGN=1

                  set_len PROC
;;;84     
;;;85     static int set_len(const char *re, int re_len) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;86       int len = 0;
000006  2400              MOVS     r4,#0
;;;87     
;;;88       while (len < re_len && re[len] != ']') {
000008  e003              B        |L12.18|
                  |L12.10|
;;;89         len += op_len(re + len);
00000a  1928              ADDS     r0,r5,r4
00000c  f7fffffe          BL       op_len
000010  4404              ADD      r4,r4,r0
                  |L12.18|
000012  42b4              CMP      r4,r6                 ;88
000014  da02              BGE      |L12.28|
000016  5d28              LDRB     r0,[r5,r4]            ;88
000018  285d              CMP      r0,#0x5d              ;88
00001a  d1f6              BNE      |L12.10|
                  |L12.28|
;;;90       }
;;;91     
;;;92       return len <= re_len ? len + 1 : -1;
00001c  42b4              CMP      r4,r6
00001e  dc01              BGT      |L12.36|
000020  1c60              ADDS     r0,r4,#1
                  |L12.34|
;;;93     }
000022  bd70              POP      {r4-r6,pc}
                  |L12.36|
000024  f04f30ff          MOV      r0,#0xffffffff        ;92
000028  e7fb              B        |L12.34|
;;;94     
                          ENDP


                          AREA ||i.setup_branch_points||, CODE, READONLY, ALIGN=1

                  setup_branch_points PROC
;;;335    
;;;336    static void setup_branch_points(struct regex_info *info) {
000000  b53c              PUSH     {r2-r5,lr}
;;;337      int i, j;
;;;338      struct branch tmp;
;;;339    
;;;340      /* First, sort branches. Must be stable, no qsort. Use bubble algo. */
;;;341      for (i = 0; i < info->num_branches; i++) {
000002  2100              MOVS     r1,#0
000004  e025              B        |L13.82|
                  |L13.6|
;;;342        for (j = i + 1; j < info->num_branches; j++) {
000006  1c4a              ADDS     r2,r1,#1
000008  e01e              B        |L13.72|
                  |L13.10|
;;;343          if (info->branches[i].bracket_index > info->branches[j].bracket_index) {
00000a  f2006344          ADD      r3,r0,#0x644
00000e  f8534031          LDR      r4,[r3,r1,LSL #3]
000012  f8533032          LDR      r3,[r3,r2,LSL #3]
000016  429c              CMP      r4,r3
000018  dd15              BLE      |L13.70|
;;;344            tmp = info->branches[i];
00001a  f2006344          ADD      r3,r0,#0x644
00001e  eb0304c1          ADD      r4,r3,r1,LSL #3
000022  cc18              LDM      r4,{r3,r4}
000024  e9cd3400          STRD     r3,r4,[sp,#0]
;;;345            info->branches[i] = info->branches[j];
000028  f2006344          ADD      r3,r0,#0x644
00002c  eb0304c1          ADD      r4,r3,r1,LSL #3
000030  eb0305c2          ADD      r5,r3,r2,LSL #3
000034  cd28              LDM      r5,{r3,r5}
000036  c428              STM      r4!,{r3,r5}
;;;346            info->branches[j] = tmp;
000038  f2006344          ADD      r3,r0,#0x644
00003c  eb0303c2          ADD      r3,r3,r2,LSL #3
000040  e9dd4500          LDRD     r4,r5,[sp,#0]
000044  c330              STM      r3!,{r4,r5}
                  |L13.70|
000046  1c52              ADDS     r2,r2,#1              ;342
                  |L13.72|
000048  f8d03964          LDR      r3,[r0,#0x964]        ;342
00004c  4293              CMP      r3,r2                 ;342
00004e  dcdc              BGT      |L13.10|
000050  1c49              ADDS     r1,r1,#1              ;341
                  |L13.82|
000052  f8d03964          LDR      r3,[r0,#0x964]        ;341
000056  428b              CMP      r3,r1                 ;341
000058  dcd5              BGT      |L13.6|
;;;347          }
;;;348        }
;;;349      }
;;;350    
;;;351      /*
;;;352       * For each bracket, set their branch points. This way, for every bracket
;;;353       * (i.e. every chunk of regex) we know all branch points before matching.
;;;354       */
;;;355      for (i = j = 0; i < info->num_brackets; i++) {
00005a  2300              MOVS     r3,#0
00005c  461a              MOV      r2,r3
00005e  4619              MOV      r1,r3
000060  e01a              B        |L13.152|
                  |L13.98|
;;;356        info->brackets[i].num_branches = 0;
000062  2300              MOVS     r3,#0
000064  eb001401          ADD      r4,r0,r1,LSL #4
000068  60e3              STR      r3,[r4,#0xc]
;;;357        info->brackets[i].branches = j;
00006a  eb001301          ADD      r3,r0,r1,LSL #4
00006e  609a              STR      r2,[r3,#8]
;;;358        while (j < info->num_branches && info->branches[j].bracket_index == i) {
000070  e007              B        |L13.130|
                  |L13.114|
;;;359          info->brackets[i].num_branches++;
000072  eb001301          ADD      r3,r0,r1,LSL #4
000076  68db              LDR      r3,[r3,#0xc]
000078  1c5b              ADDS     r3,r3,#1
00007a  eb001401          ADD      r4,r0,r1,LSL #4
00007e  60e3              STR      r3,[r4,#0xc]
;;;360          j++;
000080  1c52              ADDS     r2,r2,#1
                  |L13.130|
000082  f8d03964          LDR      r3,[r0,#0x964]        ;358
000086  4293              CMP      r3,r2                 ;358
000088  dd05              BLE      |L13.150|
00008a  f2006344          ADD      r3,r0,#0x644          ;358
00008e  f8533032          LDR      r3,[r3,r2,LSL #3]     ;358
000092  428b              CMP      r3,r1                 ;358
000094  d0ed              BEQ      |L13.114|
                  |L13.150|
000096  1c49              ADDS     r1,r1,#1              ;355
                  |L13.152|
000098  f8d03640          LDR      r3,[r0,#0x640]        ;355
00009c  428b              CMP      r3,r1                 ;355
00009e  dce0              BGT      |L13.98|
;;;361        }
;;;362      }
;;;363    }
0000a0  bd3c              POP      {r2-r5,pc}
;;;364    
                          ENDP


                          AREA ||i.slre_match||, CODE, READONLY, ALIGN=1

                  slre_match PROC
;;;424    
;;;425    int slre_match(const char *regexp, const char *s, int s_len,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;426                   struct slre_cap *caps, int num_caps, int flags) {
000004  f6ad1d78          SUB      sp,sp,#0x978
000008  4607              MOV      r7,r0
00000a  460c              MOV      r4,r1
00000c  4615              MOV      r5,r2
00000e  461e              MOV      r6,r3
000010  f8dd999c          LDR      r9,[sp,#0x99c]
000014  f8dd8998          LDR      r8,[sp,#0x998]
;;;427      struct regex_info info;
;;;428    
;;;429      /* Initialize info structure */
;;;430      info.flags = flags;
000018  f8cd9974          STR      r9,[sp,#0x974]
;;;431      info.num_brackets = info.num_branches = 0;
00001c  2000              MOVS     r0,#0
00001e  f8cd0968          STR      r0,[sp,#0x968]
000022  f8cd0644          STR      r0,[sp,#0x644]
;;;432      info.num_caps = num_caps;
000026  f8cd8970          STR      r8,[sp,#0x970]
;;;433      info.caps = caps;
00002a  f8cd696c          STR      r6,[sp,#0x96c]
;;;434    
;;;435      DBG(("========================> [%s] [%.*s]\n", regexp, s_len, s));
;;;436      return foo(regexp, (int) strlen(regexp), s, s_len, &info);
00002e  4638              MOV      r0,r7
000030  f7fffffe          BL       strlen
000034  4682              MOV      r10,r0
000036  a801              ADD      r0,sp,#4
000038  462b              MOV      r3,r5
00003a  4622              MOV      r2,r4
00003c  4651              MOV      r1,r10
00003e  9000              STR      r0,[sp,#0]
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       ||foo||
;;;437    }
000046  f60d1d78          ADD      sp,sp,#0x978
00004a  e8bd87f0          POP      {r4-r10,pc}
                          ENDP


                          AREA ||i.toi||, CODE, READONLY, ALIGN=1

                  toi PROC
;;;102    
;;;103    static int toi(int x) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;104      return isdigit(x) ? x - '0' : x - 'W';
000004  f7fffffe          BL       __rt_ctype_table
000008  6800              LDR      r0,[r0,#0]
00000a  5d00              LDRB     r0,[r0,r4]
00000c  2820              CMP      r0,#0x20
00000e  d102              BNE      |L15.22|
000010  f1a40030          SUB      r0,r4,#0x30
                  |L15.20|
;;;105    }
000014  bd10              POP      {r4,pc}
                  |L15.22|
000016  f1a40057          SUB      r0,r4,#0x57           ;104
00001a  e7fb              B        |L15.20|
;;;106    
                          ENDP


                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  5e242829          DCB      "^$$().[]*+?|\\Ssdbfnrtv",0
000004  2e5b5d2a
000008  2b3f7c5c
00000c  53736462
000010  666e7274
000014  7600    

                          AREA ||.data||, DATA, ALIGN=2

                  metacharacters
                          DCD      ||.conststring||
